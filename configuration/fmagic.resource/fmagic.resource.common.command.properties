ResourceFile.Application=Common
ResourceFile.Version=1
ResourceFile.Language=eng

###############################################################################################
#
# SOCKET NOTIFICATION ERRORS
#
###############################################################################################

#
# SOCKET Error
#

# Socket group
Notification.Basic.All.Error.Socket=
|Manual.Header=Manual
|Manual.1=Errors regarding the Socket connection

# Socket: ErrorOnSocketConnection
Notification.Common.All.Error.Socket.ErrorOnSocketConnection=
|CreatedBy=Frank Wuensche
|CreatedDate=09.01.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if the socket connection failed.
|Manual.2=It's a warning, and fired each time the socket can*t be accessed.  
|Manual.3=Please ensure that all configuration settings regarding the socket connection are correct. Please check connection data: host and port.
|Manual.4=A failed socket connection triggered from a client to a server doesn't need to be a real error. If a client can't access to a server it tries to find a new server from his server list.

###############################################################################################
#
# CIPHERING NOTIFICATION ERRORS
#
###############################################################################################

#
# CIPHER Error
#

# Cipher group
Notification.Common.All.Error.Cipher=
|Manual.Header=Manual
|Manual.1=Errors regarding the Cipher Handler

# Cipher: ErrorOnCiphering
Notification.Basic.All.Error.Cipher.ErrorOnCiphering=
|CreatedBy=Frank Wuensche
|CreatedDate=05.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if an encrypting or decrypting failed.
|Manual.2=It's a severe error and fired each time a file can't be processed.

###############################################################################################
#
# ENCODING NOTIFICATION ERRORS
#
###############################################################################################

#
# Encoding group
#
Notification.Common.All.Error.Encoding=
|Manual.Header=Manual
|Manual.1=Errors regarding the encoding of command containers

# Encoding: ErrorOnEncodingCommandContainer
Notification.Common.All.Error.Encoding.ErrorOnEncodingCommandContainer=
|CreatedBy=Frank Wuensche
|CreatedDate=08.01.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if the system fails to encode or decode a command container.
|Manual.2=It's a serious warning, and fired each time the request of a client to a server or vice versa failed because of encoding problems.  
|Manual.3=You have to look at the technical details of the dump to decide about the cause.

###############################################################################################
#
# COMMAND NOTIFICATION ERRORS
#
###############################################################################################

#
# Command group (All)
#
Notification.Common.All.Error.Command=
|Manual.Header=Manual
|Manual.1=Errors regarding the processing of commands.

# Command: ErrorOnEncodingCommandContainer
Notification.Common.All.Error.Command.ErrorOnProcessingCommand=
|CreatedBy=Frank Wuensche
|CreatedDate=29.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs on errors during processing a command on client or server.
|Manual.2=It's a serious warning. The command cannot be executed successfully.  
|Manual.3=Please look at the additional information for details.

# Command: IntegrityError
Notification.Common.All.Error.Command.IntegrityError=
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Normally a command is filled with some parameters before it is sent to the client. Backwards the client sends one or more result values to the server. Both, parameters and results of a given command, must be defined as resource items, coded as usage 'Parameter' resp. 'Result' withe the same group name as the command 'Identifier'.
|Manual.2=This error occurs if one or more necessary parameters resp. results are not defined.  
|Manual.3=Please add the missing parameters or results as resouce items. 
|Manual.4=Please look at the additional information for details.

###############################################################################################
#
# COMMAND HANDSHAKE
#
###############################################################################################

#
# All group
#
Command.Common.All.Identifier.Handshake=
|Manual.Header=Handshake
|Manual.1=Parameter and settings regarding the command 'Handshake'.

#
# ServerCommandHandshake
#

# Handshake: Handshake
Command.Common.All.Identifier.Handshake.Handshake=ServerCommandHandshake
|CreatedBy=Frank Wuensche
|CreatedDate=14.01.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for handshake between client and server.
|Manual.2=The client sends this command to get first contact to a server. The client gives some information, like its application identifier, its version, its public key and its session identifier. The server checks if it can meet all demands and responses successfully or refuses connection.
|Manual.3=The session identifier of the client must be known on server side. Otherwise the server refuses the connection. In this case the client has to create a session on server side by executing the command "CreateSession" first.
|Manual.4=Please notice: The alias name of this command must be the name of the class that processes this command on the server. For example: If the alias name is set to "ServerCommandHandshake" the system tries to load  a class named "ServerCommandHandshake" with the help of the class loader on server side.

#
# Parameter
#

# Parameter: ClientPublicKey
Command.Common.All.Parameter.Handshake.ClientPublicKey=ClientPublicKey
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'Handshake'.
|Manual.2=The public key of the client that is to be used on server to encode all commands sent back to the client.

#
# Results (Return values)
#

# Result: ServerPublicKey
Command.Common.All.Result.Handshake.ServerPublicKey=ServerPublicKey
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'Handshake'.
|Manual.2=The public key of the server that is to be used on client to encode all commands sent to the server.

# Result: IsSuccessful
Command.Common.All.Result.Handshake.IsSuccessful=IsSuccessful
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'Handshake'.
|Manual.2=Returns 'true' if the handshake was processed successfully, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandHandshake: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandHandshake.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'Handshake' in Milliseconds.
|Minimum=5000
|Maximum=60000
|Default=10000

###############################################################################################
#
# COMMAND CREATE SESSION
#
###############################################################################################

#
# ServerCommandCreateSession
#

# Processing: CreateSession
Command.Common.All.Identifier.CreateSession.CreateSession=ServerCommandCreateSession
|CreatedBy=Frank Wuensche
|CreatedDate=14.01.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for creating a client session on server side.
|Manual.2=The client sends this command to create an active session on server side. Additional the client gives some information, like its application identifier, its version and its public key. The server checks if it can meet all demands and responses successfully or denies connection.
|Manual.3=The session identifier of the client must be known on server side. Otherwise the server refuses the connection. For that reason the client has to create a session on server side first, before other commands can be executed.
|Manual.4=Please notice: The alias name of this command must be the name of the class that processes this command on the server. For example: If the alias name is set to "ServerCommandCreateSession" the system tries to load  a class named "ServerCommandCreateSession" with the help of the class loader on server side.

#
# Parameter
#

# Parameter: ClientPublicKey
Command.Common.All.Parameter.CreateSession.ClientPublicKey=ClientPublicKey
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'CreateSession'.
|Manual.2=The public key of the client that is to be used on server to encode all commands sent back to the client.

#
# Results (Return values)
#

# Result: ServerPublicKey
Command.Common.All.Result.CreateSession.ServerPublicKey=ServerPublicKey
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'CreateSession'.
|Manual.2=The public key of the server that is to be used on client to encode all commands sent to the server.

# Result: IsSuccessful
Command.Common.All.Result.CreateSession.IsSuccessful=IsSuccessful
|CreatedBy=Frank Wuensche
|CreatedDate=02.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'CreateSession'.
|Manual.2=Returns 'true' if the command was processed successfully, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandCreateSession: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandCreateSession.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'CreateSession' in Milliseconds.
|Minimum=5000
|Maximum=60000
|Default=10000

###############################################################################################
#
# COMMAND MEDIA FILE CHECK
#
###############################################################################################

#
# ServerCommandMediaFileCheck
#

# Processing: MediaFileCheck
Command.Common.All.Identifier.MediaFileCheck.MediaFileCheck=ServerCommandMediaFileCheck
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for checking if a media file already exists on a server.
|Manual.2=Only the most recent media file is searched for on server, not any obsolete files.

#
# Parameter
#

# Parameter: MediaResourceIdentifier
Command.Common.All.Parameter.MediaFileCheck.MediaResourceIdentifier=MediaResourceIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileCheck'.
|Manual.2=The media resource identifier of the media file to be checked.

# Parameter: FileType
Command.Common.All.Parameter.MediaFileCheck.FileType=FileType
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileCheck'.
|Manual.2=The file type of the media file to be checked.

# Parameter: DataIdentifier
Command.Common.All.Parameter.MediaFileCheck.DataIdentifier=DataIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileCheck'
|Manual.2=The data identifier of the media file to be checked.

# Parameter: HashValue
Command.Common.All.Parameter.MediaFileCheck.HashValue=HashValue
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileCheck'.
|Manual.2=The hash value of the media file to be checked.

#
# Results (Return values)
#

# Result: IsExisting
Command.Common.All.Result.MediaFileCheck.IsExisting=IsExisting
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileCheck'.
|Manual.2=Returns 'true' if the media file already exists on server, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandMediaFileCheck: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandMediaFileCheck.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'MediaFileCheck' in Milliseconds.
|Minimum=5000
|Maximum=60000
|Default=10000

###############################################################################################
#
# COMMAND MEDIA FILE UPLOAD
#
###############################################################################################

#
# ServerCommandMediaFileUpload
#

# Processing: MediaFileUpload
Command.Common.All.Identifier.MediaFileUpload.MediaFileUpload=ServerCommandMediaFileUpload
|CreatedBy=Frank Wuensche
|CreatedDate=29.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for uploading a media file from a client to a server.

#
# Parameter
#

# Parameter: MediaResourceIdentifier
Command.Common.All.Parameter.MediaFileUpload.MediaResourceIdentifier=MediaResourceIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileUpload'.
|Manual.2=The media resource identifier of the media file to be uploaded.

# Parameter: FileType
Command.Common.All.Parameter.MediaFileUpload.FileType=FileType
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileUpload'.
|Manual.2=The file type of the media file to be uploaded.

# Parameter: DataIdentifier
Command.Common.All.Parameter.MediaFileUpload.DataIdentifier=DataIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileUpload'.
|Manual.2=The data identifier of the media file to be uploaded.

# Parameter: HashValue
Command.Common.All.Parameter.MediaFileUpload.HashValue=HashValue
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileUpload'.
|Manual.2=The hash value of the media file to be uploaded.

# Parameter: MediaContent
Command.Common.All.Parameter.MediaFileUpload.MediaContent=MediaContent
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileUpload'.
|Manual.2=The content of the media file to be uploaded, as a string.

#
# Results (Return values)
#

# Result: IsExisting
Command.Common.All.Result.MediaFileUpload.IsExisting=IsExisting
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileUpload'.
|Manual.2=Returns 'true' if the media file already exists on server, otherwise 'false'.
|Value.1=true
|Value.2=false

# Result: IsUploaded
Command.Common.All.Result.MediaFileUpload.IsUploaded=IsUploaded
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileUpload'.
|Manual.2=Returns 'true' if the media file could be uploaded, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandMediaFileUpload: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandMediaFileUpload.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'MediaFileUpload' in Milliseconds.
|Minimum=60000
|Maximum=300000
|Default=60000

###############################################################################################
#
# COMMAND MEDIA FILE READ
#
###############################################################################################

#
# ServerCommandMediaFileRead
#

# Processing: MediaFileRead
Command.Common.All.Identifier.MediaFileRead.MediaFileRead=ServerCommandMediaFileRead
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for reading a media file form a server.
|Manual.2=Only the most recent media file is read.

#
# Parameter
#

# Parameter: MediaResourceIdentifier
Command.Common.All.Parameter.MediaFileRead.MediaResourceIdentifier=MediaResourceIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the commands 'MediaFileRead'.
|Manual.2=The media resource identifier of the media file to be read.

# Parameter: DataIdentifier
Command.Common.All.Parameter.MediaFileRead.DataIdentifier=DataIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the commands 'MediaFileRead'.
|Manual.2=The data identifier of the media file to be read.

#
# Results (Return values)
#

# Result: FileType
Command.Common.All.Result.MediaFileRead.FileType=FileType
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileRead'.
|Manual.2=The file type of the media file read.

# Result: MediaContent
Command.Common.All.Result.MediaFileRead.MediaContent=MediaContent
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'MediaFileRead'.
|Manual.2=The content of the media file read as a string.

# Result: IsExisting
Command.Common.All.Result.MediaFileRead.IsExisting=IsExisting
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileRead'.
|Manual.2=Returns 'true' if the media file exists on server, otherwise 'false'.
|Value.1=true
|Value.2=false

# Result: IsRead
Command.Common.All.Result.MediaFileRead.IsRead=IsRead
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileRead'.
|Manual.2=Returns 'true' if the media file could be read, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandMediaFileRead: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandMediaFileRead.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'MediaFileRead' in Milliseconds.
|Minimum=10000
|Maximum=120000
|Default=20000

###############################################################################################
#
# COMMAND MEDIA FILE INFO
#
###############################################################################################

#
# ServerCommandMediaFileInfo
#

# Processing: MediaFileInfo
Command.Common.All.Identifier.MediaFileInfo.MediaFileInfo=ServerCommandMediaFileInfo
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Command for getting information of a media file on an application server.
|Manual.2=Only the most recent media file is considered.

#
# Parameter
#

# Parameter: MediaResourceIdentifier
Command.Common.All.Parameter.MediaFileInfo.MediaResourceIdentifier=MediaResourceIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the command 'MediaFileInfo'.
|Manual.2=The media resource identifier of the media file to be considered.

# Parameter: DataIdentifier
Command.Common.All.Parameter.MediaFileInfo.DataIdentifier=DataIdentifier
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Parameter for the commands 'MediaFileInfo'.
|Manual.2=The data identifier of the media file to be considered.

#
# Results (Return values)
#

# Result: FileType
Command.Common.All.Result.MediaFileInfo.FileType=FileType
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileInfo'.
|Manual.2=The file type of the media file read.

# Result: HashValue
Command.Common.All.Result.MediaFileInfo.HashValue=HashValue
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'MediaFileInfo'.
|Manual.2=The hash value of the media file read.

# Result: FileSize
Command.Common.All.Result.MediaFileInfo.FileSize=FileSize
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'MediaFileInfo'.
|Manual.2=The file size of the media file read (in Bytes).

# Result: LastModifiedDate
Command.Common.All.Result.MediaFileInfo.LastModifiedDate=LastModifiedDate
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Result value for the command 'MediaFileInfo'.
|Manual.2=The last modified date of the media file read.
|Manual.3=Formatted as: 'YYYYMMDDhhmmss', e. g. '20130522143317' for 22th of May 2013, 14:33:17.

# Result: IsEncoded
Command.Common.All.Result.MediaFileInfo.IsEncoded=IsEncoded
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileInfo'.
|Manual.2=Returns 'true' if the media file is encoded on server, otherwise 'false'.
|Value.1=true
|Value.2=false

# Result: IsExisting
Command.Common.All.Result.MediaFileInfo.IsExisting=IsExisting
|CreatedBy=Frank Wuensche
|CreatedDate=22.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Return value for the command 'MediaFileInfo'.
|Manual.2=Returns 'true' if the media file exists on server, otherwise 'false'.
|Value.1=true
|Value.2=false

#
# Configuration
#

# CommandMediaFileInfo: SocketTimeoutInMilliseconds
Configuration.Common.All.Property.CommandMediaFileInfo.SocketTimeoutInMilliseconds=
|CreatedBy=Frank Wuensche
|CreatedDate=17.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the socket timeout of the command 'MediaFileInfo' in Milliseconds.
|Minimum=5000
|Maximum=20000
|Default=10000
