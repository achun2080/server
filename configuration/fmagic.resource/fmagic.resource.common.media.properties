ResourceFile.Application=Common
ResourceFile.Version=1
ResourceFile.Language=eng

###############################################################################################
#
# MEDIA ATTRIBUTES
#
###############################################################################################

#
# ATTRIBUTE Media
#

# Media group
Resource.Common.All.Attribute.Media=
|Manual.Header=Manual
|Manual.1=Media attributes

# Media: MediaType
Resource.Common.All.Attribute.Media.MediaType=MediaType
|CreatedBy=Frank Wuensche
|CreatedDate=30.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The attribute 'MediaType' determines the type of the media, used, amongst others, as a technical information how to show it on screen.
|Manual.2=Please set this parameter to one of the values 'Image', 'Video', 'Audio' or 'Document'.
|Manual.3=This parameter is mandatory for each media item you define.
|Manual.4=The value parameters 1...4 of this resource item determine the strings to use as literals to find out which media type is set. It is supposed to be something like an ENUM list.
|Manual.5=Value.1 set the 'Image' literal. Value.2 set the 'Video' literal. Value.3 set the 'Audio' literal. Value.4 set the 'Document' literal.
|Value.1=Image
|Value.2=Video
|Value.3=Audio
|Value.4=Document

# Media: FileTypes
Resource.Common.All.Attribute.Media.FileTypes=FileTypes
|CreatedBy=Frank Wuensche
|CreatedDate=30.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The attribute 'FileTypes' sets a list of file types the media can be provided. This parameter is used to determine and to confine the file types you are allowed to upload or to download.
|Manual.2=Please set this parameter to a comma ',' separated list, containing one or more of the following values 'jpg', 'png', 'mkv', 'mp4', 'wav', 'pdf' or many others.
|Manual.3=This parameter is mandatory for each media item you define.
|Manual.4=The value parameters 1...x of this resource item determine the file types that are allowed generally. It is supposed to be something like an ENUM list, mapped to the values 1...4.
|Value.1=jpg
|Value.2=png
|Value.3=mkv
|Value.4=wav
|Value.5=tif

# Media: StorageLocation
Resource.Common.All.Attribute.Media.StorageLocation=StorageLocation
|CreatedBy=Frank Wuensche
|CreatedDate=31.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The attribute 'StorageLocation' sets the party (client or server or both) where the media files are to be stored physically.
|Manual.2=Please set the Storage Location to 'Client', if it has to be stored at the mobile client only. In this case the server has no access to this media.
|Manual.3=Please set the Storage Location to 'Server', if the server application holds the media file. In this case the client gets a copy of it on demand and can cache it. But the media file is not stored into the formal media structures of the client application.
|Manual.4=Please set the Storage Location to 'Synchronize', if both server and client parallel holds the media file. In this case you might provide user content to other users, or you might use this setting as a backup strategy, or you might achieve something like a permanent caching.
|Manual.5=This parameter is mandatory for each media item you define.
|Manual.6=The value parameters 1...3 of this resource item determine the strings to use as literals to find out which origin is set. It is supposed to be something like an ENUM list, mapped to the values 1...3.
|Manual.7=Value.1 set the 'Server' literal. Value.2 set the 'Client' literal. Value.3 set the 'Synchronize' literal.
|Value.1=Server
|Value.2=Client
|Value.3=Synchronize

# Media: LogicalPath
Resource.Common.All.Attribute.Media.LogicalPath=LogicalPath
|CreatedBy=Frank Wuensche
|CreatedDate=31.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The attribute 'LogicalPath' determine where to store the media file on server or client.
|Manual.2=Please notice, that the logical path is not automatically used as, say a file path. The server or client can store media data in different ways and logic. May be, some client even don't know file paths in the classical meaning.
|Manual.3=Different media resources can use one and the same logical path. Please set the path as a slash '/' separated list of path elements.
|Manual.4=This parameter is mandatory for each media item you define.
 
# Media: MaximumMediaSize
Resource.Common.All.Attribute.Media.MaximumMediaSize=MaximumMediaSize
|CreatedBy=Frank Wuensche
|CreatedDate=08.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The attribute 'MaximumMediaSize' sets the maximum size (in Kilobyte) a media file may not exceed. This value is checked each time a media file is uploaded to the system.
|Manual.2=Please don't forget that one Kilobyte has 1024 Bytes, and one Megabyte has 1024 Kilobytes.
|Manual.3=It is recommended to set an appropriate value for each media resource item depending on the domain it is used in.
|Manual.4=The size of a media handled by the Media Manager shouldn't exceed 10 Megabytes (10240 Kilobytes).
 
# Media: ServerEncoding
Resource.Common.All.Attribute.Media.ServerEncoding=ServerEncoding
|CreatedBy=Frank Wuensche
|CreatedDate=31.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters determine if the media file has to be ciphered on server or client or both.
|Manual.2=Please set the attribute 'ServerEncoding' to 'true', if the media files have to be stored ciphered on server. In this case the files are stored as encoded files only on the server, and were decoded just before sending them to a client.
|Manual.3=This parameter is optional. The default value is 'false'.
|Manual.4=The value parameters 1...2 of this resource item determine the strings to use as literals to find out which value is set. It is supposed to be something like an ENUM list, mapped to the values 1...2.
|Manual.5=Value.1 set the 'true' literal. Value.2 set the 'false' literal.
|Value.1=true
|Value.2=false

# Media: ClientEncoding
Resource.Common.All.Attribute.Media.ClientEncoding=ClientEncoding
|CreatedBy=Frank Wuensche
|CreatedDate=31.03.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters determine if the media file has to be ciphered on server or client or both.
|Manual.2=Please set the attribute 'ClientEncoding' to 'true', if the media files have to be stored ciphered on the client. In this case the client is responsible for decoding those files, and only the client knows the encoding resp. decoding key.
|Manual.3=This parameter is optional. The default value is 'false'.
|Manual.4=The value parameters 1...2 of this resource item determine the strings to use as literals to find out which value is set. It is supposed to be something like an ENUM list, mapped to the values 1...2.
|Manual.5=Value.1 set the 'true' literal. Value.2 set the 'false' literal.
|Value.1=true
|Value.2=false

###############################################################################################
#
# MEDIA CONTEXT
#
###############################################################################################

# MEDIA Context

# Media group
Context.Common.All.Identifier.Media=
|Manual.Header=Manual
|Manual.1=Contexts regarding Media

# Media: Processing
Context.Common.All.Identifier.Media.Processing=Media
|CreatedBy=Frank Wuensche
|CreatedDate=05.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Context used for information regarding media processing.

###############################################################################################
#
# MEDIA CONFIGURATION SERVER
#
###############################################################################################

# Media group (Server)
Configuration.Common.Server.Property.Media=
|Manual.Header=Manual
|Manual.1=Configuration properties regarding Media on server side.

# Media: ServerLocalMediaFilePathRoot
Configuration.Common.Server.Property.Media.ServerLocalMediaFilePathRoot=
|CreatedBy=Frank Wuensche
|CreatedDate=02.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the root path to store media files locally on server site.
|Manual.2=Please separate the path elements with slash characters '/' only.

# Media: ServerEncodingKeyList
Configuration.Common.Server.Property.Media.ServerEncodingKeyList=
|CreatedBy=Frank Wuensche
|CreatedDate=04.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter Server Encoding is set to 'true', the media files are stored ciphered on the server, but they were decoded just before sending them to a client.
|Manual.2=Instead of using a key directly as a parameter, say in the configuration file of the system, you are forced to define a key list, beginning from '1' to 'x'.
|Manual.3=From the point of view of the application you always handle with key numbers, each pointing to a real key. With the help of this configuration parameter you define a list of keys that can be used generally.
|Manual.4=The key list contains comma separated items, each of them set by the two values 'Number' and 'Key' separated by a colon character ':'.
|Manual.5=For example: '1:1234abcd , 2:5678efgh , 3:9012ijkl , 4:2g5uZZt9'
|Manual.6=The key values have to be set with 8 characters at least.
|Manual.7=Please set the corresponding configuration parameter 'ServerEncodingKeyNumber' to the key number that is to be used for encoding media files at runtime.
|Usage.Header=Using a parameter file
|Usage.1=Instead of using a comma separated list you may store all parameters in a parameter file, without any limitation regarding the format.
|Usage.2=At the end of the day the lines of the parameter file were joined to a single string. You might comment some lines with the help of the hash mark "#". Those lines are ignored.  
|Usage.3=You can name the configuration file practically, e. g. 'something.conf', and refer to it with the name in curly bracket, starting with a dollar symbol, e. g. '${something.conf}'.

# Media: ServerEncodingKeyNumber
Configuration.Common.Server.Property.Media.ServerEncodingKeyNumber=
|CreatedBy=Frank Wuensche
|CreatedDate=04.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter Server Encoding is set to 'true', the media files are stored ciphered on the server, but they were decoded just before sending them to a client.
|Manual.2=Instead of using a key directly as a parameter, say in the configuration file of the system, you are forced to define a key list, beginning from '1' to 'x'.
|Manual.3=From the point of view of the application you always handle with key numbers, each pointing to a real key. With the help of the corresponding configuration parameter 'ServerEncodingKeyList' you define a list of keys that can be used generally.
|Manual.4=The key list contains comma separated items, each of them set by the two values 'Number' and 'Key' separated by a colon character ':'.
|Manual.5=Please set this configuration parameter to the key number that is to be used for encoding media files at runtime.

# Media: ServerEncodingEnabled
Configuration.Common.Server.Property.Media.ServerEncodingEnabled=
|CreatedBy=Frank Wuensche
|CreatedDate=05.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter Server Encoding is set to 'true', the media files are stored ciphered on the server, but they were decoded just before sending them to a client.
|Manual.2=Please use this configuration item to enable or disable encoding of media files on server side.
|Manual.3=The default value is preset to 'false'.

###############################################################################################
#
# MEDIA CONFIGURATION CLIENT
#
###############################################################################################

# Media group (Client)
Configuration.Common.Client.Property.Media=
|Manual.Header=Manual
|Manual.1=Configuration properties regarding Media on client side.

# Media: ClientLocalMediaFilePathRoot
Configuration.Common.Client.Property.Media.ClientLocalMediaFilePathRoot=
|CreatedBy=Frank Wuensche
|CreatedDate=24.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=Define the root path to store media files locally on client site.
|Manual.2=Please separate the path elements with slash characters '/' only.

# Media: ClientEncodingEnabled
Configuration.Common.Client.Property.Media.ClientEncodingEnabled=
|CreatedBy=Frank Wuensche
|CreatedDate=24.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter 'ClientEncoding' is set to 'true', the media files are stored ciphered on the client, but they were decoded just before using it on the client, e. g. showing it on screen.
|Manual.2=Please use this configuration item to enable or disable encoding of media files on client side.
|Manual.3=The default value is preset to 'false'.

###############################################################################################
#
# MEDIA CONFIGURATION ALL
#
###############################################################################################

# Media group (All)
Configuration.Common.All.Property.Media=
|Manual.Header=Manual
|Manual.1=Configuration properties regarding Media on both, server and client side.

# Media: CleanPendingDaysToKeep
Configuration.Common.All.Property.Media.CleanPendingDaysToKeep=
|CreatedBy=Frank Wuensche
|CreatedDate=06.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The media files are locally stored in dedicated media directories. Temporary files are processed in 'pending' directories, each belonging to a specific media resource item.
|Manual.2=Normally pending media files are removed automatically after processing, but sometimes a pending media file is not deleted, because of errors, or stopping the application server during processing, or kept for analyzing later. 
|Manual.3=There is a service, deleting those files periodically. Please set this configuration parameter to a number of days the files should be kept in the 'pending' directory. Files will be deleted only if they are older then 'x' days.
|Minimum=0
|Maximum=30
|Default=7

# Media: CleanDeletedDaysToKeep
Configuration.Common.All.Property.Media.CleanDeletedDaysToKeep=
|CreatedBy=Frank Wuensche
|CreatedDate=06.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The media files are locally stored in dedicated media directories. Deleted files are moved to 'deleted' directories, each belonging to a specific media resource item.
|Manual.2=There is a service, that removes 'deleted' files periodically, to prevent from unchecked growing of directory size. Please set this configuration parameter to a number of days the files should be kept in the 'deleted' directory. Files will be removed only if they are older then 'x' days.
|Minimum=0
|Maximum=365
|Default=180

# Media: CleanObsoleteDaysToKeep
Configuration.Common.All.Property.Media.CleanObsoleteDaysToKeep=
|CreatedBy=Frank Wuensche
|CreatedDate=07.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The media files are locally stored in dedicated media directories. If a given media file, based on the media resource item and the data identifier, is overridden by a newer one, the older version is kept in the regular media directory.
|Manual.2=Actually those obsolete media files can be deleted immediately, but there is a chance that they are bound by other running processes for a certain time. 
|Manual.3=There is a service, deleting those files periodically. Please set this configuration parameter to a number of days the files should be kept in the 'regular' media directory. Files will be deleted only if they are older then 'x' days.
|Minimum=1
|Maximum=7
|Default=1
 
# Media: MaximumMediaSize
Configuration.Common.All.Property.Media.MaximumMediaSize=MaximumMediaSize
|CreatedBy=Frank Wuensche
|CreatedDate=08.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The configuration property 'MaximumMediaSize' sets the general maximum size (in Kilobyte) a media file may not exceed. This value is checked each time a media file is uploaded to the system.
|Manual.2=Please don't forget that one Kilobyte has 1024 Bytes, and one Megabyte has 1024 Kilobytes.
|Manual.3=You can It is recommended to set an appropriate value for each media resource item depending on the domain it is used in.
|Manual.4=The size of a media handled by the Media Manager shouldn't exceed 10 Megabytes (10240 Kilobytes).
|Minimum=2
|Maximum=10240
|Default=5120

###############################################################################################
#
# MEDIA LOCALDATA
#
###############################################################################################

# Media group (Client)
Localdata.Common.Client.Property.Media=
|Manual.Header=Manual
|Manual.1=Local data properties regarding Media on client side.

# Media: ClientEncodingKeyList
Localdata.Common.Client.Property.Media.ClientEncodingKeyList=
|CreatedBy=Frank Wuensche
|CreatedDate=24.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter 'ClientEncoding' is set to 'true', the media files are stored ciphered on the client, but they were decoded just before using it on the client, e. g. showing it on screen.
|Manual.2=Instead of using a key directly as a parameter, say in the configuration file of the system, you are forced to define a key list, beginning from '1' to 'x'.
|Manual.3=From the point of view of the application you always handle with key numbers, each pointing to a real key. With the help of this configuration parameter you define a list of keys that can be used generally.
|Manual.4=The key list contains comma separated items, each of them set by the two values 'Number' and 'Key' separated by a colon character ':'.
|Manual.5=For example: '1:1234abcd , 2:5678efgh , 3:9012ijkl , 4:2g5uZZt9'
|Manual.6=The key values have to be set with 8 characters at least.
|Manual.7=Please set the corresponding local data property 'ClientEncodingKeyNumber' to the key number that is to be used for encoding media files at runtime.

# Media: ClientEncodingKeyNumber
Localdata.Common.Client.Property.Media.ClientEncodingKeyNumber=
|CreatedBy=Frank Wuensche
|CreatedDate=24.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=The cipher parameters 'ServerEncoding' and 'ClientEncoding' of a media resource item determine if the media file has to be ciphered on server or client or both. If the parameter 'ClientEncoding' is set to 'true', the media files are stored ciphered on the client, but they were decoded just before using it on the client, e. g. showing it on screen.
|Manual.2=Instead of using a key directly as a parameter, say in the configuration file of the system, you are forced to define a key list, beginning from '1' to 'x'.
|Manual.3=From the point of view of the application you always handle with key numbers, each pointing to a real key. With the help of the corresponding local data property 'ClientEncodingKeyList' you define a list of keys that can be used generally.
|Manual.4=The key list contains comma separated items, each of them set by the two values 'Number' and 'Key' separated by a colon character ':'.
|Manual.5=Please set this local data property to the key number that is to be used for encoding media files at runtime.

###############################################################################################
#
# MEDIA NOTIFICATION ERRORS ALL
#
###############################################################################################

# Media group ALL
Notification.Common.All.Error.Media=
|Manual.Header=Manual
|Manual.1=Notification errors regarding media operations for server and client.

# Media: ErrorOnUploadingFile
Notification.Common.All.Error.Media.ErrorOnUploadingFile=
|CreatedBy=Frank Wuensche
|CreatedDate=03.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if a media file couldn't be uploaded into the system.
|Manual.2=It's a severe error, and fired each time a media file couldn't be uploaded.
|Manual.3=Please look at the additional information for details.

# Media: ErrorOnCheckingFile
Notification.Common.All.Error.Media.ErrorOnCheckingFile=
|CreatedBy=Frank Wuensche
|CreatedDate=30.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This message is fired, if an error occurred during checking a media file on server.
|Manual.2=It's a severe warning, and fired each time a media file couldn't be checked.
|Manual.3=Please look at the additional information for details.

# Media: ErrorOnStoringFileLocally
Notification.Common.All.Error.Media.ErrorOnStoringFileLocally=
|CreatedBy=Frank Wuensche
|CreatedDate=29.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if a media file couldn't be stored into the local media repository.
|Manual.2=It's a severe error, and fired each time a media file couldn't be stored.
|Manual.3=Please look at the additional information for details.

# Media: ErrorOnReadingFileFromServer
Notification.Common.All.Error.Media.ErrorOnReadingFileFromServer=
|CreatedBy=Frank Wuensche
|CreatedDate=01.05.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error occurs if a media file couldn't be read from a remote server.
|Manual.2=It is fired each time a media file couldn't be read.
|Manual.3=Please look at the additional information for details.

# Media: ErrorOnProcessingFile
Notification.Common.All.Error.Media.ErrorOnProcessingFile=
|CreatedBy=Frank Wuensche
|CreatedDate=05.04.2013
|CreatedVersion=1
|Manual.Header=Manual
|Manual.1=This error is fired if media file processing failed.
|Manual.2=It's a severe error, and fired each time a media file couldn't be processed.
|Manual.3=Please look at the additional information for details.
